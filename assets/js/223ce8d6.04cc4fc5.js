"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8112],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>p});var o=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=o.createContext({}),u=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=u(e.components);return o.createElement(l.Provider,{value:t},e.children)},d="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=u(n),m=i,p=d["".concat(l,".").concat(m)]||d[m]||h[m]||a;return n?o.createElement(p,r(r({ref:t},c),{},{components:n})):o.createElement(p,r({ref:t},c))}));function p(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,r=new Array(a);r[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:i,r[1]=s;for(var u=2;u<a;u++)r[u]=n[u];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4358:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var o=n(7462),i=(n(7294),n(3905));const a={title:"Project Organization",sidebar_position:6,description:"Setting up your project"},r="A TOX Centric Approach",s={unversionedId:"SM-guide/organization",id:"SM-guide/organization",title:"Project Organization",description:"Setting up your project",source:"@site/docs/SM-guide/organization.md",sourceDirName:"SM-guide",slug:"/SM-guide/organization",permalink:"/TouchDesigner-StyleGuide/docs/SM-guide/organization",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/SM-guide/organization.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"Project Organization",sidebar_position:6,description:"Setting up your project"},sidebar:"tutorialSidebar",previous:{title:"GLSL Comments",permalink:"/TouchDesigner-StyleGuide/docs/SM-guide/glsl-in-td/glsl-comments"},next:{title:"System Configuration",permalink:"/TouchDesigner-StyleGuide/docs/SM-guide/system-configuration"}},l={},u=[{value:"Directories and Saving",id:"directories-and-saving",level:2},{value:"Node Naming Conventions",id:"node-naming-conventions",level:2},{value:"Notable Exceptions to this Rule",id:"notable-exceptions-to-this-rule",level:3},{value:"Standard Modules",id:"standard-modules",level:2}],c={toc:u},d="wrapper";function h(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"a-tox-centric-approach"},"A TOX Centric Approach"),(0,i.kt)("p",null,"In our current general networking building strategy, as many elements as possible are externalized. The strategy of externalizing the contents of a network helps:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"reduce toe file size"),(0,i.kt)("li",{parentName:"ul"},"focus on modular design \u2013 this focus helps us think of modules that could be interchangeable provided that we land on a standard method of building in and out communication standards."),(0,i.kt)("li",{parentName:"ul"},"allow for better git tracking \u2013 tox and toe files are binary, which makes it nearly impossible to use the same git process as you might with a different code base. By externalizing modules, we can easily see when a tox has changed, roll back to previous tox files, and in other ways wrangle the complex challenges of ensuring for comprehensive version tracking during development."),(0,i.kt)("li",{parentName:"ul"},"allow for multiple developer contributions via git \u2013 by focusing on individual tox files as the epicenter of change, multiple developers can be writing and re-writing networks without fear of merge conflicts \u2013 provided that they aren\u2019t editing the same tox at the same time.")),(0,i.kt)("h2",{id:"directories-and-saving"},"Directories and Saving"),(0,i.kt)("p",null,"Structurally, we build our repo directories to match our toe file directories. If a given base is located in /software_project_name/base_communication, then it\u2019s tox file should be saved at a repo location that matches. The thinking here is to build parallel structures between networks and directories. Why? You might ask. Mirroring directory structures can help other programmers locate your work. This conventionalized method of locating files, means that if you know where a given module lives in a network, you should also be able to locate that file in the reop. For any frustration this may cause during building, it solves an innumerable number of problems during debugging and code exchange."),(0,i.kt)("h2",{id:"node-naming-conventions"},"Node Naming Conventions"),(0,i.kt)("p",null,"Clear namespace use is essential to any project. If you\u2019re familiar with the Zen of Python, you might remember two essential ideas:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Explicit is better than implicit"),(0,i.kt)("li",{parentName:"ul"},"Namespaces are one honking great idea \u2014 let\u2019s do more of those!")),(0,i.kt)("p",null,"What does this have to do with naming contentions? It\u2019s easy to find yourself navigating another programmers network trying to discern what they were attempting to do \u2013 even trying on how they might have been thinking about a given project or idea. For this very reason we\u2019ve landed on the explicit prefixing of unique node names in a TouchDesigner network with the operators\u2019 type. For example, a null TOP used as a background element might have the name \u201cnull_bg\u201d. While this makes for longer operator names, it also allows other programmers the opportunity to see, at a glance, what operators are in a given network or process. While this may initially feel cumbersome, this convention is ultimately about making your code as parse-able and readable for another programmer as possible. This is also about creating code for your future self \u2013 coming back to a project in 2, 5, or 10 months means you\u2019ll likely want as many breadcrumbs as possible in order to understand what your past self was trying to do."),(0,i.kt)("h3",{id:"notable-exceptions-to-this-rule"},"Notable Exceptions to this Rule"),(0,i.kt)("p",null,"The most apparent exceptions to this rule are found in local/modules. Mods have the benefit of being accessible with the short hand:"),(0,i.kt)("p",null,"mod.textDATname.functionName"),(0,i.kt)("p",null,"This excellent feature can be ham-stringed by long text DAT names. As an example, we might imagine that we have a module we\u2019d like to use with the mod. shorthand. THat module\u2019s name might easily be something like \u201ctext_system_configuration\u201d when using our standard naming convention, inside of this module we might want to use a function called \u201cstart_up\u201d. This would mean that we\u2019d need to write something akin to:"),(0,i.kt)("p",null,"mod.text_system_configuration.start_up()"),(0,i.kt)("p",null,"in order to call this function. The shortening of this by the prefix \u201ctext_\u201d may not be a huge number of characters, but it helps provide a little bit of clarity in the reading a of the expression:"),(0,i.kt)("p",null,"mod.system_configuration.start_up()"),(0,i.kt)("p",null,"This also helps distinguish our module \u2013 which is essentially being accessed as a library \u2013 and a regular text DAT."),(0,i.kt)("h2",{id:"standard-modules"},"Standard Modules"),(0,i.kt)("p",null,"While any given project is likely to have it\u2019s own set of requirements and needs, as a general course architectural, we might think about six essential ingredients in a given project:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"local \u2013 local might have any number of modules or variables used in a project\nbase_information \u2013 information doesn\u2019t functionally operate as an integral part of a network, but instead acts as a fast access location for seeing the contents of storage, and logic systems."),(0,i.kt)("li",{parentName:"ul"},"base_communication \u2013 communication is used to house all of the network protocol exchanges between machines"),(0,i.kt)("li",{parentName:"ul"},"base_configuration \u2013 configuration holds the essential elements for a toe file to start up, properly configure itself, and set storage elements for the touch network"),(0,i.kt)("li",{parentName:"ul"},"container_node \u2013 node is a container used for outputting to displays that function as nodes on a large distributed system. The separation of node and master / control roles in a single toe file allows for universal building which can then adapt based on role assignment in a given system."),(0,i.kt)("li",{parentName:"ul"},"container_master \u2013 master, similar to node, is used for outputting the control interface for a given system. This also houses the logic systems for a given project, and can help centralize the control of a system. Ideally, nodes possesses very little autonomy and instead receive all of their instructions from the master. In this same vein, master nodes likely do very little heavy lifting in terms of rendering of media playback. If possible lighter weight assets, or smaller renders should be used to provide programming or confidence interfaces. Here the idea is to leverage the power of creating a distributed system in order to have machines focus on their strengths. This also means that render nodes and control machines might not have matching specifications \u2013 especially in regards to graphics cards.")))}h.isMDXComponent=!0}}]);