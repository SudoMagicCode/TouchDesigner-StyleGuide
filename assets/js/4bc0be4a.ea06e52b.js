"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6973],{3905:(e,t,o)=>{o.d(t,{Zo:()=>h,kt:()=>m});var n=o(7294);function a(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function r(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?r(Object(o),!0).forEach((function(t){a(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function s(e,t){if(null==e)return{};var o,n,a=function(e,t){if(null==e)return{};var o,n,a={},r=Object.keys(e);for(n=0;n<r.length;n++)o=r[n],t.indexOf(o)>=0||(a[o]=e[o]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)o=r[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(a[o]=e[o])}return a}var l=n.createContext({}),u=function(e){var t=n.useContext(l),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},h=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var o=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,h=s(e,["components","mdxType","originalType","parentName"]),c=u(o),p=a,m=c["".concat(l,".").concat(p)]||c[p]||d[p]||r;return o?n.createElement(m,i(i({ref:t},h),{},{components:o})):n.createElement(m,i({ref:t},h))}));function m(e,t){var o=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=o.length,i=new Array(r);i[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:a,i[1]=s;for(var u=2;u<r;u++)i[u]=o[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,o)}p.displayName="MDXCreateElement"},899:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>u});var n=o(7462),a=(o(7294),o(3905));const r={title:"Network Organization",description:"Organizing your thoughts and your noodles",slug:"/SM-guide/network-organization"},i="Network Organization",s={unversionedId:"SM-guide/network-organization",id:"SM-guide/network-organization",title:"Network Organization",description:"Organizing your thoughts and your noodles",source:"@site/docs/SM-guide/004-network-organization.md",sourceDirName:"SM-guide",slug:"/SM-guide/network-organization",permalink:"/docs/SM-guide/network-organization",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Network Organization",description:"Organizing your thoughts and your noodles",slug:"/SM-guide/network-organization"},sidebar:"tutorialSidebar",previous:{title:"Nodes",permalink:"/docs/SM-guide/nodes"},next:{title:"Python in TD",permalink:"/docs/SM-guide/python-in-td"}},l={},u=[{value:"Links to Derivative&#39;s official docs",id:"links-to-derivatives-official-docs",level:2}],h={toc:u},c="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(c,(0,n.Z)({},h,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"network-organization"},"Network Organization"),(0,a.kt)("p",null,"A network\u2019s re-usability lives and dies in its organization and structuring. While there are limits to a modular approach, it\u2019s well worth considering the larger implications around cultivating a forward focused temperament when building new systems. Every project will eventually come up against deadlines, changes orders, and the necessities of project delivery. To the best of our abilities, however, we might consider a tempered approach to thinking about how a particular element might be able to be used and re-used in future projects."),(0,a.kt)("p",null,"To that end, clear organization and careful planning help facilitate this process. For the sake of a simple case study, let\u2019s for a moment consider instancing networks. For the uninitiated, instancing allows you to reuse a single piece of geometry once it\u2019s been passed to the GPU. This method of drawing geometry is significantly cheaper, computationally, than drawing additional copies of the geometry on the CPU. In principle, you only draw the geometry once, then create a transformation matrix for subsequent copies of the original geometry. The transformation of the copies is most efficiently done in CHOP channels, sometimes initially fed by a geometry converted to channel data."),(0,a.kt)("p",null,"If we develop the transformation channels in the same network as the rendering system, we\u2019re able to quickly see what\u2019s happening in the process. This also allows for less complicated paths, in a network that is generally flatter. The trade off here is re-usability. This approach typically makes it more difficult to identify how to break apart a network for re-use. The alternative, would be to build the rendering engine as a separate directory from the networking focused on object transformation. It\u2019s difficult to say which is the \u201cbetter\u201d choice, as both have their merits. Rather, it\u2019s important to understand that one approach has a shorter potential shelf life."),(0,a.kt)("p",null,"This brings us to a larger question of organization \u2013 in what manner should one organize their network. While there aren\u2019t any hard and fast rules, it\u2019s worth considering how you might construct a network as specific to it\u2019s given role. In the example above, you might build a network that was focused on transformational information, while another was focused on texture\u2019s, and finally a network that was the rendering engine. This modular division creates more layers, but also allows for the reuse of any one of those elements \u2013 save just the texture building system, or the instances. This also creates space to consider how you might externalize those elements \u2013 in this respect a git history would allow the programmer to trace back through various iterations of one element while still preserving the current developments of another \u2013 keep all of your advances in texture building, but go back to an earlier transformation system \u2013 for example."),(0,a.kt)("p",null,"If you\u2019re not yet sold on this idea, at the very least consider dividing up your network, spatially, into regions responsible for a given task. Create territories for rendering, texture building, and instance translation. The most difficult to parse networks a wandering collision of every element in a single space. When possible, it is essential that you avoid this kind of programming. All of us invariably work fast and hard, creating functional but not elegant code \u2013 that, however, should not be our primary modus operandi."),(0,a.kt)("admonition",{title:"Do",type:"tip"},(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},"Break apart your networks into modular pieces when possible"),(0,a.kt)("li",{parentName:"ul"},"Create easily visually navigable networks."),(0,a.kt)("li",{parentName:"ul"},"Avoid mixtures of sizes, distributions, and complex nodal arraignments\\"),(0,a.kt)("li",{parentName:"ul"},"Think ahead \u2013 what organizational method best sets you up for success in the future?"),(0,a.kt)("li",{parentName:"ul"},"Limit the complexity of any given network \u2013 if you find a network is growing to be too sprawling, how might you re-organize or compartmentalize your implementation?"),(0,a.kt)("li",{parentName:"ul"},"Think of your work in terms of a test against the other members of the team \u2013 would this structure and approach pass a Barry test? a Vlad test? a Bryant test?"))),(0,a.kt)("admonition",{title:"Don\u2019t",type:"danger"},(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},"Make messes you never attend to \u2013 \u201cI\u2019ll clean it up later\u201d is the mantra of every creative coder at one point or another. If you have have enough time to have that thought, you have enough time to make a plan to refactor your code for a cleaner implementation."),(0,a.kt)("li",{parentName:"ul"},"Be happy with your first draft \u2013 you built it fast and hard on the first pass to rough out the idea, but that shouldn\u2019t be good enough for the final implementation."),(0,a.kt)("li",{parentName:"ul"},"Forget to ask for another set of eyes"),(0,a.kt)("li",{parentName:"ul"},"Forget to learn from your mistakes \u2013 we all make them, it\u2019s the joy of working on projects at large scales. It\u2019s okay to fall down, just remember to get up and avoid that same trap the next time around."),(0,a.kt)("li",{parentName:"ul"},"Forget that you might not be the person to implement your code \u2013 we sometimes have to hand off a project to another team member, or are only in charge of developing a small piece of a larger project. There\u2019s a good chance that what you make will need to be decipherable by another team member. Don\u2019t assume that you will always be available to describe what\u2019s in your network \u2013 write it (and document it) so that another could pick it up, and continue with minimal effort."),(0,a.kt)("li",{parentName:"ul"},"Forget to ask for help \u2013 we have one of the most remarkable TouchDesigner teams in the world \u2013 perhaps the most remarkable collection of them. There\u2019s a good chance that the answers are in the room.")),(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("img",{src:o(8166).Z,width:"3840",height:"2318"}))),(0,a.kt)("h2",{id:"links-to-derivatives-official-docs"},"Links to Derivative's official docs"))}d.isMDXComponent=!0},8166:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/dont-network-org-784ed40c014b841af936c2ec541ebaae.png"}}]);