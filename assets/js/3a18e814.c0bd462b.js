"use strict";(self.webpackChunktdStyleGuide=self.webpackChunktdStyleGuide||[]).push([[7592],{2415:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"SM-guide/nodes/naming","title":"Naming Patterns","description":"Nodes, names, and their predictable patterns","source":"@site/docs/SM-guide/nodes/001-naming.md","sourceDirName":"SM-guide/nodes","slug":"/SM-guide/nodes/naming","permalink":"/docs/SM-guide/nodes/naming","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Naming Patterns","description":"Nodes, names, and their predictable patterns"},"sidebar":"tutorialSidebar","previous":{"title":"Nodes","permalink":"/docs/SM-guide/nodes"},"next":{"title":"Size","permalink":"/docs/SM-guide/nodes/size"}}');var s=t(4848),o=t(8453);const r={title:"Naming Patterns",description:"Nodes, names, and their predictable patterns"},d=void 0,l={},a=[{value:"Notable Exceptions",id:"notable-exceptions",level:3}];function c(e){const n={code:"code",h3:"h3",li:"li",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["This section stands as an expansion on the above naming convention style guide. After much discussion, the current practice for operator naming follows the python style guide of using underscores rather than camel case. This appears in a number of various locations in your network, and requires special attention when it comes to renaming nodes. When renaming an operator or when terminating with a null the following naming convention should be used: ",(0,s.jsx)(n.code,{children:"{operator}_{descriptor}_{name}{#}"})]}),"\n",(0,s.jsx)(n.p,{children:"The above can be decoded:"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Element"}),(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"operator"})}),(0,s.jsxs)(n.td,{style:{textAlign:"left"},children:["the operator type, e.g. ",(0,s.jsx)(n.code,{children:"moviefilein"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"descriptor_name"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"whatever descriptor is used for the node, using underscores in place of spaces"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"#"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"any digit that might be associated with the node"})]})]})]}),"\n",(0,s.jsx)(n.p,{children:"A few examples as reference:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"base_com"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"base_data"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"script_inst_data1"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"script_inst_data2"})}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"At the end of a rendering chain a null is added inside of a base:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"null_final"})}),"\n",(0,s.jsx)(n.p,{children:"A movie player uses two movie file in TOPs in order to facilitate seamless switching between videos. The two movie file in TOPs might be renamed in order to specify that they are the A or B deck:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"moviefilein_a"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"moviefilein_b"})}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"A series of TOP chains are used in order to composite a variety of thumbnails used for instancing geometry. Each TOP chain terminates in a null, and needs to be differentiated with a digit to allow for texture instancing:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"null_ui_thumbnail1"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"null_ui_thumbnail2"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"null_ui_thumbnail3"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"null_ui_thumbnail4"})}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"TOX Components should also follow this naming convention"}),"\n",(0,s.jsx)(n.h3,{id:"notable-exceptions",children:"Notable Exceptions"}),"\n",(0,s.jsx)(n.p,{children:"The most apparent exceptions to this rule are found in local/modules. Mods have the benefit of being accessible with the short hand:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"mod.textDATname.functionName"})}),"\n",(0,s.jsx)(n.p,{children:"This excellent feature can be ham-stringed by long text DAT names. As an example, we might imagine that we have a module we\u2019d like to use with the mod. shorthand. That module\u2019s name might easily be something like \u201ctext_system_configuration\u201d when using our standard naming convention, inside of this module we might want to use a function called \u201cstart_up\u201d. This would mean that we\u2019d need to write something akin to:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"mod.text_system_configuration.start_up()"})}),"\n",(0,s.jsx)(n.p,{children:"in order to call this function. The shortening of this by the prefix \u201ctext_\u201d may not be a huge number of characters, but it helps provide a little bit of clarity in the reading a of the expression:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"mod.system_configuration.start_up()"})}),"\n",(0,s.jsx)(n.p,{children:"This also helps distinguish our module \u2013 which is essentially being accessed as a library \u2013 and a regular text DAT."})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>d});var i=t(6540);const s={},o=i.createContext(s);function r(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);