"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1028],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var o=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=o.createContext({}),p=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),d=p(n),h=i,m=d["".concat(l,".").concat(h)]||d[h]||u[h]||r;return n?o.createElement(m,s(s({ref:t},c),{},{components:n})):o.createElement(m,s({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,s=new Array(r);s[0]=h;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a[d]="string"==typeof e?e:i,s[1]=a;for(var p=2;p<r;p++)s[p]=n[p];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},3708:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>p});var o=n(7462),i=(n(7294),n(3905));const r={title:"Extensions",sidebar_position:2,description:"Python extensions in TouchDesigner",slug:"/SM-guide/python-in-td/extensions"},s="Extensions",a={unversionedId:"SM-guide/python-in-td/py-exts",id:"SM-guide/python-in-td/py-exts",title:"Extensions",description:"Python extensions in TouchDesigner",source:"@site/docs/SM-guide/python-in-td/002-py-exts.md",sourceDirName:"SM-guide/python-in-td",slug:"/SM-guide/python-in-td/extensions",permalink:"/TouchDesigner-StyleGuide/docs/SM-guide/python-in-td/extensions",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Extensions",sidebar_position:2,description:"Python extensions in TouchDesigner",slug:"/SM-guide/python-in-td/extensions"},sidebar:"tutorialSidebar",previous:{title:"Modules",permalink:"/TouchDesigner-StyleGuide/docs/SM-guide/python-in-td/modules"},next:{title:"Local Modules",permalink:"/TouchDesigner-StyleGuide/docs/SM-guide/python-in-td/local-modules"}},l={},p=[{value:"Custom Class Objects",id:"custom-class-objects",level:2},{value:"Type Hinting",id:"type-hinting",level:3},{value:"Doc Strings",id:"doc-strings",level:3},{value:"Promoted Methods",id:"promoted-methods",level:3},{value:"Internal Methods",id:"internal-methods",level:3},{value:"Private Methods",id:"private-methods",level:3},{value:"Singletons",id:"singletons",level:2},{value:"Common Characteristics",id:"common-characteristics",level:3},{value:"Other Class Objects",id:"other-class-objects",level:2},{value:"Links to Derivative&#39;s official docs",id:"links-to-derivatives-official-docs",level:2}],c={toc:p},d="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"extensions"},"Extensions"),(0,i.kt)("h2",{id:"custom-class-objects"},"Custom Class Objects"),(0,i.kt)("h3",{id:"type-hinting"},"Type Hinting"),(0,i.kt)("p",null,"As a quick reminder, Python is a dynamically typed language. Which is to say that unlike other languages where we must specify a variable type during it's creation, the type of a variable in Python is largely determined at run time. That makes for a very flexible language, but can create some challenges during development - it's easy to incorrectly pass an argument type and then spend valuable debugging only to discover that you pass a ",(0,i.kt)("inlineCode",{parentName:"p"},"str")," instead of an ",(0,i.kt)("inlineCode",{parentName:"p"},"int"),". Python now supports type hinting, which allows you to more easily track the argument type. "),(0,i.kt)("p",null,"When possible, it is highly recommended that that you use type hints - not only for the benefits of autocompletion in VS Code, but also as a kindness to your fellow developers. Here are some quick resources about Type Hinting:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://realpython.com/lessons/type-hinting/"},"Real Python type hinting lesson")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://mypy.readthedocs.io/en/stable/cheat_sheet_py3.html"},"mypy type hints cheat sheet")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.python.org/3.9/library/typing.html"},"Python docs typing"))),(0,i.kt)("h3",{id:"doc-strings"},"Doc Strings"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def foo(arg1:int, arg2:str) -> list:\n    """A silly example\n\n    An example function that accepts two arguments, returns\n    a list, and raises no errors. This is mostly to illustrate\n    what doc strings might look like for a function.\n\n    Args:\n        arg1 `int`: Some integer\n        arg2 `int`: Some integer\n        \n    Returns:\n        my_list `list`: A list made up of arg1 and arg2\n\n    Raises:\n        None\n    """\n    my_list = [arg1, arg2]\n    return my_list\n')),(0,i.kt)("h3",{id:"promoted-methods"},"Promoted Methods"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Foo:\n    def __init__(self, owner_op:OP) -> None:\n        self.My_op = owner_op\n\n    def Promoted_method(self, some_int_arg:int) -> None:\n        pass\n")),(0,i.kt)("h3",{id:"internal-methods"},"Internal Methods"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Foo:\n    def __init__(self, owner_op:OP) -> None:\n        self.My_op = owner_op\n\n    def internal_method(self, some_int_arg:int) -> None:\n        pass\n")),(0,i.kt)("h3",{id:"private-methods"},"Private Methods"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Foo:\n    def __init__(self, owner_op:OP) -> None:\n        self.My_op = owner_op\n\n    def _private_method(self, some_int_arg:int) -> None:\n        pass\n")),(0,i.kt)("h2",{id:"singletons"},"Singletons"),(0,i.kt)("p",null,"Classes that belong to a single instance of an operator. "),(0,i.kt)("h3",{id:"common-characteristics"},"Common Characteristics"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Output:\n\n    def __init__(self, owner_op):\n        self.Owner_op = owner_op\n\n    def Touch_start(self):\n        print('Running Touch Start | Output')\n")),(0,i.kt)("h2",{id:"other-class-objects"},"Other Class Objects"),(0,i.kt)("h2",{id:"links-to-derivatives-official-docs"},"Links to Derivative's official docs"))}u.isMDXComponent=!0}}]);