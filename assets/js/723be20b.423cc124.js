"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1050],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var i=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=i.createContext({}),u=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=u(e.components);return i.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},h=i.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(n),h=o,m=d["".concat(s,".").concat(h)]||d[h]||p[h]||r;return n?i.createElement(m,a(a({ref:t},c),{},{components:n})):i.createElement(m,a({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,a=new Array(r);a[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:o,a[1]=l;for(var u=2;u<r;u++)a[u]=n[u];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}h.displayName="MDXCreateElement"},5089:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var i=n(7462),o=(n(7294),n(3905));const r={title:"Externalizing TOX Files",description:"An examination of the use of TOX files when building your project",slug:"/SM-guide/external-tox-files"},a="A TOX Centric Approach",l={unversionedId:"SM-guide/externalizing-tox-files",id:"SM-guide/externalizing-tox-files",title:"Externalizing TOX Files",description:"An examination of the use of TOX files when building your project",source:"@site/docs/SM-guide/008-externalizing-tox-files.md",sourceDirName:"SM-guide",slug:"/SM-guide/external-tox-files",permalink:"/docs/SM-guide/external-tox-files",draft:!1,tags:[],version:"current",sidebarPosition:8,frontMatter:{title:"Externalizing TOX Files",description:"An examination of the use of TOX files when building your project",slug:"/SM-guide/external-tox-files"},sidebar:"tutorialSidebar",previous:{title:"Project Organization",permalink:"/docs/SM-guide/organization"},next:{title:"Comments",permalink:"/docs/SM-guide/network-comments"}},s={},u=[{value:"Directories and Saving",id:"directories-and-saving",level:2},{value:"Node Naming Conventions",id:"node-naming-conventions",level:2},{value:"Notable Exceptions to this Rule",id:"notable-exceptions-to-this-rule",level:3}],c={toc:u},d="wrapper";function p(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"a-tox-centric-approach"},"A TOX Centric Approach"),(0,o.kt)("p",null,"In our current general networking building strategy, as many elements as possible are externalized. The strategy of externalizing the contents of a network helps:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"reduce toe file size"),(0,o.kt)("li",{parentName:"ul"},"focus on modular design - this focus helps us think of modules that could be interchangeable provided that we land on a standard method of building in and out communication standards."),(0,o.kt)("li",{parentName:"ul"},"allow for better git tracking - tox and toe files are binary, which makes it nearly impossible to use the same git process as you might with a different code base. By externalizing modules, we can easily see when a tox has changed, roll back to previous tox files, and in other ways wrangle the complex challenges of ensuring for comprehensive version tracking during development."),(0,o.kt)("li",{parentName:"ul"},"allow for multiple developer contributions via git - by focusing on individual tox files as the epicenter of change, multiple developers can be writing and re-writing networks without fear of merge conflicts - provided that they aren\u2019t editing the same tox at the same time.")),(0,o.kt)("h2",{id:"directories-and-saving"},"Directories and Saving"),(0,o.kt)("p",null,"Structurally, we build our repo directories to match our toe file directories. If a given base is located in /software_project_name/base_communication, then it\u2019s tox file should be saved at a repo location that matches. The thinking here is to build parallel structures between networks and directories. Why? You might ask. Mirroring directory structures can help other programmers locate your work. This conventionalized method of locating files, means that if you know where a given module lives in a network, you should also be able to locate that file in the reop. For any frustration this may cause during building, it solves an innumerable number of problems during debugging and code exchange."),(0,o.kt)("h2",{id:"node-naming-conventions"},"Node Naming Conventions"),(0,o.kt)("p",null,"Clear namespace use is essential to any project. If you\u2019re familiar with the Zen of Python, you might remember two essential ideas:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Explicit is better than implicit"),(0,o.kt)("li",{parentName:"ul"},"Namespaces are one honking great idea \u2014 let\u2019s do more of those!")),(0,o.kt)("p",null,"What does this have to do with naming contentions? It\u2019s easy to find yourself navigating another programmers network trying to discern what they were attempting to do \u2013 even trying on how they might have been thinking about a given project or idea. For this very reason we\u2019ve landed on the explicit prefixing of unique node names in a TouchDesigner network with the operators\u2019 type. For example, a null TOP used as a background element might have the name \u201cnull_bg\u201d. While this makes for longer operator names, it also allows other programmers the opportunity to see, at a glance, what operators are in a given network or process. While this may initially feel cumbersome, this convention is ultimately about making your code as parse-able and readable for another programmer as possible. This is also about creating code for your future self - coming back to a project in 2, 5, or 10 months means you\u2019ll likely want as many breadcrumbs as possible in order to understand what your past self was trying to do."),(0,o.kt)("h3",{id:"notable-exceptions-to-this-rule"},"Notable Exceptions to this Rule"),(0,o.kt)("p",null,"The most apparent exceptions to this rule are found in local/modules. Mods have the benefit of being accessible with the short hand:"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"mod.textDATname.functionName")),(0,o.kt)("p",null,"This excellent feature can be ham-stringed by long text DAT names. As an example, we might imagine that we have a module we\u2019d like to use with the mod. shorthand. THat module\u2019s name might easily be something like \u201ctext_system_configuration\u201d when using our standard naming convention, inside of this module we might want to use a function called \u201cstart_up\u201d. This would mean that we\u2019d need to write something akin to:"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"mod.text_system_configuration.start_up()")),(0,o.kt)("p",null,"in order to call this function. The shortening of this by the prefix ",(0,o.kt)("inlineCode",{parentName:"p"},"text_")," may not be a huge number of characters, but it helps provide a little bit of clarity in the reading a of the expression:"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"mod.system_configuration.start_up()")),(0,o.kt)("p",null,"This also helps distinguish our module - which is essentially being accessed as a library - and a regular text DAT."))}p.isMDXComponent=!0}}]);